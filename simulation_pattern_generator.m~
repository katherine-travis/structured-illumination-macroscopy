clear; clc; close all;

%% Import an image 
img = rgb2gray(imread('USAF_Resolution.jpeg'));

p=0.2;  % p% of the top dominant frequencies will be found

% Take the 2D Fourier Transform of the image
F = fftshift(fft2(double(img)));
magnitude = abs(F);  % Magnitude spectrum
phase = angle(F);  % Phase spectrum

% Identify dominant frequencies (top p% by magnitude)
% Sort the magnitude in descending order
[sortedVals, idx] = sort(magnitude(:), 'descend');

% Extract the top p% of frequency components
num_components = round(p*0.01 * numel(magnitude));  % p% of all components
dominantIdx = idx(1:num_components);
dominantIdx2=dominantIdx(1:1:end);
dominantIdx=dominantIdx2;
%% Generate and save sinusoidal patterns for each dominant frequency
save_path = uigetdir('', '');

% Loop through the dominant frequencies and create patterns
[X, Y] = meshgrid(1:1920, 1:1200);  % Grid for pattern generation for slm

for k = 1:length(dominantIdx)
    [row, col] = ind2sub(size(F), dominantIdx(k));
    
    % Compute frequency values relative to the image center
    u = row - size(img, 1) / 2;
    v = col - size(img, 2) / 2;
    
    % Generate the sinusoidal pattern using the frequency and phase
    freq = sqrt(u^2 + v^2);  % Frequency magnitude
    phase_shift = phase(row, col);  % Corresponding phase

    % Create the 2D sinusoidal pattern
    pattern = sin(2*pi*(u*X/size(img,2) + v*Y/size(img,1)) + phase_shift);

    % Normalize pattern to [0, 255] and convert to uint8
    pattern = uint8(255*(pattern - min(pattern(:)))/(max(pattern(:)) - min(pattern(:))));

    % Save the pattern with frequency and phase in the filename
    filename = sprintf('pattern_freq_%.2f_phase_%.2f.png', freq, phase_shift); % change name based on 
    imwrite(pattern, fullfile(save_path, filename));
end

%% Reconstruct the image using the dominant components
    % Create a mask for the dominant frequencies
mask = zeros(size(F));
mask(dominantIdx) = F(dominantIdx);

    % Inverse Fourier Transform to reconstruct the image
reconstructed = real(ifft2(ifftshift(mask)));

    % Display original and reconstructed images
figure(1);
subplot(211); 
imshow(img, []); 
title('Original Image');
subplot(212); 
imshow(uint8(reconstructed), []); 
title('Reconstructed Image with the top 0.2% of frequencies');



% reconstruct FFT with magnitude (abs F), and phase 
